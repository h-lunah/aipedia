#!/usr/bin/env python
"""AI powered Wikipedia clone application"""

import logging
import traceback
from urllib.parse import unquote

from sanic import Sanic, response, Request, HTTPResponse
from sanic.exceptions import NotFound
from sanic_ext import Extend

import markdown
import nh3
from jinja2 import Environment, FileSystemLoader
from dotenv import load_dotenv
from asyncer import asyncify

from functions.generation import generate_article
from functions.numbers import volume, page
from functions.formatting import extract_article, extract_subtitle, wiki_capitalize

from globals import model

load_dotenv()

app = Sanic("aipedia")
app.static("/static", "./static")
Extend(app)

env = Environment(loader=FileSystemLoader("templates"))


@app.exception(NotFound)
async def handle_404(request: Request, exception: Exception) -> HTTPResponse:
    """Redirect 404 errors to the root (may affect SEO)"""
    return response.redirect("/")


@app.get("/")
async def root(request: Request) -> HTTPResponse:
    """Make /wiki/Main_Page the root of the web server"""
    return response.redirect("/wiki/Main_Page")


@app.post("/api/select-model")
async def select_model(request: Request) -> HTTPResponse:
    """Backend model selection endpoint"""
    return response.json({"selected": list(request.json.values())[0]})


@app.get("/wiki/<article>")
async def wiki(request: Request, article: str) -> HTTPResponse:
    """Article generation frontend endpoint"""
    content = ""
    subtitle = ""

    article = article.replace(" ", "_")

    if article == "Main_Page":
        with open("templates/main.md", encoding="utf-8") as main_page:
            content = markdown.markdown(main_page.read())
    else:
        try:
            article_data = await asyncify(generate_article)(nh3.clean(article), model)
            content = markdown.markdown(
                extract_article(article_data), extensions=["fenced_code"]
            )
            subtitle = extract_subtitle(article_data)
        except Exception as e:  # do not generate error 500
            logging.warning(
                "Caught exception:\n%s: %s\n\n%s",
                e.__class__.__name__,
                e,
                traceback.format_exc(),
            )
            content = markdown.markdown(
                "There is currently no text on this page. You can [search for this page title](#) "
                "in other pages, [search the related logs](#), or [create this page](#)."
            )
            subtitle = ""

    template = env.get_template("wiki.html")

    return response.html(
        template.render(
            title=wiki_capitalize(unquote(article.replace("_", " "))),
            subtitle=subtitle,
            volume=volume(),
            page=page(),
            content=unquote(content),
            footer_text="This article has been generated by <a href='https://gemini.google.com'> "
            "Gemini</a>. Please check important information.",
        )
    )


if __name__ == "__main__":
    app.run(host="0.0.0.0", port=443, ssl="certs")
